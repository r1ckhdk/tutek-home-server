services:

  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${NGINX_LOCAL_DIRECTORY}/nginx.conf:/etc/nginx/nginx.conf
      - ${NGINX_LOCAL_DIRECTORY}/certs:/etc/nginx/certs
      - ~/blogs/${BLOG_NAME}/public:/var/www/${BLOG_NAME}
    restart: unless-stopped
    labels:
      homepage.name: Nginx
      homepage.group: Network
      homepage.href: ${SERVER_IP}
      homepage.description: Web server / reverse proxy

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      PUID: ${PUID}
      PGID: ${DOCKER_GID}
    ports:
      - 3000:3000
    volumes:
      - /srv/homepage/config:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations
    restart: unless-stopped
    
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8080:80/tcp"
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
    volumes:
      - ${PIHOLE_LOCAL_DIRECTORY}/etc-pihole:/etc/pihole
      - ${PIHOLE_LOCAL_DIRECTORY}/etc-dnsmasq.d:/etc/dnsmasq.d
    restart: unless-stopped
    labels:
      homepage.name: Pi-hole
      homepage.group: Network
      homepage.href: ${SERVER_IP}:8080
      homepage.description: DNS server/sinkhole

  freshrss:
    image: freshrss/freshrss:alpine
    container_name: freshrss
    ports:
      - "8081:80" 
    volumes:
      - ${FRESHRSS_LOCAL_DIRECTORY}/data:/var/www/FreshRSS/data
      - ${FRESHRSS_LOCAL_DIRECTORY}/extensions:/var/www/FreshRSS/extensions 
    environment:
      TZ: ${TZ} 
    restart: unless-stopped
    dns:
      - 1.1.1.1   # alpine image needs additional dns setup; using cloudfare dns address
    labels:
      homepage.name: FreshRSS
      homepage.group: Media
      homepage.href: ${SERVER_IP}:8081
      homepage.description: RSS aggregator
  
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    network_mode: 'host'
    volumes:
      - ${JELLYFIN_LOCAL_DIRECTORY}/config:/config
      - ${JELLYFIN_LOCAL_DIRECTORY}/cache:/cache
      - type: bind
        source: /media/jellyfin
        target: /media
    restart: unless-stopped
    labels:
      homepage.name: Jellyfin
      homepage.group: Media
      homepage.href: ${SERVER_IP}:8096
      homepage.description: Media server

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=${QBITTORRENT_WEBUI_PORT}
      - TORRENTING_PORT=${QBITTORRENT_TORRENTING_PORT}
    volumes:
      - ${QBITTORRENT_LOCAL_DIRECTORY}/config:/config
      - ${QBITTORRENT_LOCAL_DIRECTORY}/downloads:/downloads
    ports:
      - ${QBITTORRENT_WEBUI_PORT}:${QBITTORRENT_WEBUI_PORT}
      - ${QBITTORRENT_TORRENTING_PORT}:${QBITTORRENT_TORRENTING_PORT}
      - ${QBITTORRENT_TORRENTING_PORT}:${QBITTORRENT_TORRENTING_PORT}/udp
    dns:
      - 1.1.1.1
    restart: unless-stopped
    labels:
      homepage.name: qBittorrent 
      homepage.group: Downloads
      homepage.href: ${SERVER_IP}:8085
      homepage.description: Torrent client

  slskd: 
    image: slskd/slskd:latest
    container_name: slskd
    environment:
      - TZ=${TZ}
      - SLSKD_REMOTE_CONFIGURATION=true
    ports:
      - 5030:5030/tcp
      - 5031:5031/tcp
      - 50300:50300/tcp
    volumes:
      - ${SLSKD_LOCAL_DIRECTORY}:/app:rw
    user: ${PUID}:${PGID}
    labels:
      homepage.name: slskd 
      homepage.group: Downloads
      homepage.href: ${SERVER_IP}:5030
      homepage.description: Soulseek p2p client daemon
