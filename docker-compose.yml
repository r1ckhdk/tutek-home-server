services:

  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${NGINX_LOCAL_DIRECTORY}/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${NGINX_LOCAL_DIRECTORY}/conf.d:/etc/nginx/conf.d
      - ${NGINX_LOCAL_DIRECTORY}/certs:/etc/nginx/certs
      - ~/blogs/${BLOG_NAME}/public:/var/www/${BLOG_NAME}
    restart: unless-stopped
    depends_on:
      - jellyfin
    labels:
      homepage.name: Nginx
      homepage.group: Network
      homepage.href: ${SERVER_IP}
      homepage.description: Web server / reverse proxy

  woodpecker-server:
    image: woodpeckerci/woodpecker-server:latest
    container_name: woodpecker-server
    restart: always
    ports:
      - "8000:8000"
      - "9000:9000"
    volumes:
      - ${WOODPECKER_SERVER_DIRECTORY}/data/:/var/lib/woodpecker/
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WOODPECKER_OPEN=true
      - WOODPECKER_HOST=${WOODPECKER_HOST}
      - WOODPECKER_GITHUB=true
      - WOODPECKER_GITHUB_CLIENT=${WOODPECKER_GITHUB_CLIENT}
      - WOODPECKER_GITHUB_SECRET=${WOODPECKER_GITHUB_SECRET}
      - WOODPECKER_AGENT_SECRET=${WOODPECKER_AGENT_SECRET}
      - WOODPECKER_SERVER_ALLOW_TRUSTED=true
      - WOODPECKER_ADMIN=r1ckhdk
    dns:
      - 1.1.1.1
    networks:
      - woodpecker

  woodpecker-agent:
    image: woodpeckerci/woodpecker-agent:latest
    command: agent
    restart: always
    privileged: true
    depends_on:
      - woodpecker-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WOODPECKER_SERVER=woodpecker-server:9000
      - WOODPECKER_AGENT_SECRET=${WOODPECKER_AGENT_SECRET}
      - WOODPECKER_HEALTHCHECK=false
    dns:
      - 1.1.1.1
    networks:
      - woodpecker

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      PUID: ${PUID}
      PGID: ${DOCKER_GID}
    ports:
      - 3001:3000
    volumes:
      - /srv/homepage/config:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations
    restart: unless-stopped
    
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8080:80/tcp"
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
    volumes:
      - ${PIHOLE_LOCAL_DIRECTORY}/etc-pihole:/etc/pihole
      - ${PIHOLE_LOCAL_DIRECTORY}/etc-dnsmasq.d:/etc/dnsmasq.d
    dns:
      - 1.1.1.1
    restart: unless-stopped
    labels:
      homepage.name: Pi-hole
      homepage.group: Network
      homepage.href: ${SERVER_IP}:8080
      homepage.description: DNS server/sinkhole

  rsshub:
    # two ways to enable puppeteer:
    # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled
    # * (consumes more disk space and memory) leave everything unchanged
    container_name: rsshub
    image: diygod/rsshub
    restart: always
    ports:
        - "1200:1200"
    environment:
        NODE_ENV: production
        CACHE_TYPE: redis
        REDIS_URL: "redis://redis:6379/"
        PUPPETEER_WS_ENDPOINT: "ws://browserless:3000" # marked
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:1200/healthz"]
        interval: 30s
        timeout: 10s
        retries: 3
    depends_on:
        - redis
        - browserless # marked

  browserless: # 
    container_name: browserless
    image: browserless/chrome # marked
    restart: always # marked
    ulimits: # marked
        core: # marked
            hard: 0 # marked
            soft: 0 # marked
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3000/pressure"]
        interval: 30s
        timeout: 10s
        retries: 3

  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    volumes:
        - ${REDIS_LOCAL_DIRECTORY}/data:/data
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 5s

  freshrss:
    image: freshrss/freshrss:alpine
    container_name: freshrss
    ports:
      - "8081:80" 
    volumes:
      - ${FRESHRSS_LOCAL_DIRECTORY}/data:/var/www/FreshRSS/data
      - ${FRESHRSS_LOCAL_DIRECTORY}/extensions:/var/www/FreshRSS/extensions 
    environment:
      TZ: ${TZ} 
    restart: unless-stopped
    dns:
      - 1.1.1.1   # alpine image needs additional dns setup; using cloudfare dns address
    labels:
      homepage.name: FreshRSS
      homepage.group: Media
      homepage.href: ${SERVER_IP}:8081
      homepage.description: RSS aggregator
  
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    ports:
      - "8096:8096"
    volumes:
      - ${JELLYFIN_LOCAL_DIRECTORY}/config:/config
      - ${JELLYFIN_LOCAL_DIRECTORY}/cache:/cache
      - type: bind
        source: /media/jellyfin
        target: /media
    dns:
      - 1.1.1.1
    restart: unless-stopped
    labels:
      homepage.name: Jellyfin
      homepage.group: Media
      homepage.href: ${SERVER_IP}:8096
      homepage.description: Media server

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=${QBITTORRENT_WEBUI_PORT}
      - TORRENTING_PORT=${QBITTORRENT_TORRENTING_PORT}
    volumes:
      - ${QBITTORRENT_LOCAL_DIRECTORY}/config:/config
      - /media/jellyfin:/downloads
    ports:
      - ${QBITTORRENT_WEBUI_PORT}:${QBITTORRENT_WEBUI_PORT}
      - ${QBITTORRENT_TORRENTING_PORT}:${QBITTORRENT_TORRENTING_PORT}
      - ${QBITTORRENT_TORRENTING_PORT}:${QBITTORRENT_TORRENTING_PORT}/udp
    dns:
      - 1.1.1.1
    restart: unless-stopped
    labels:
      homepage.name: qBittorrent 
      homepage.group: Downloads
      homepage.href: ${SERVER_IP}:8085
      homepage.description: Torrent client
  
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      - RUN_OPTS= #optional
    volumes:
      - ${JACKETT_LOCAL_DIRECTORY}/config:/config
      - ${JACKETT_LOCAL_DIRECTORY}/blackhole:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped
  
  slskd: 
    image: slskd/slskd:latest
    container_name: slskd
    environment:
      - TZ=${TZ}
      - SLSKD_REMOTE_CONFIGURATION=true
    ports:
      - 5030:5030/tcp
      - 5031:5031/tcp
      - 50300:50300/tcp
    volumes:
      - ${SLSKD_LOCAL_DIRECTORY}:/app:rw
    user: ${PUID}:${PGID}
    labels:
      homepage.name: slskd 
      homepage.group: Downloads
      homepage.href: ${SERVER_IP}:5030
      homepage.description: Soulseek p2p client daemon

networks:
  woodpecker:
